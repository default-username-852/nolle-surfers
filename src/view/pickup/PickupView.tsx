
import * as React from "react";
import * as THREE from "three";
import BackgroundImage from "./background.png";
import BookModel from "./book.glb";
import PencilModel from "./pencil.glb";
import LaptopModel from "./laptop.glb";
import WaterBottleModel from "./water_bottle.glb";
import { GLTF } from "three-stdlib";
import { Lane, laneToOffset } from "../../model/Lane";
import { PickupType } from "../../model/Pickup";
import { Shadow } from "@react-three/drei";
import { gameState } from "../..";
import { useFrame, useLoader } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";

const ROTATION_SPEED: number = 4;

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Artieee (https://sketchfab.com/Artieee)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/pencil-low-0f0a907cb9dd4705a84c85ca2f9db760
Title: Pencil Low
*/

const Pencil = React.forwardRef(function(props: JSX.IntrinsicElements['group'], ref: React.Ref<THREE.Group>) {
    type GLTFResult = GLTF & {
        nodes: {
            Pencil_Low_pencil_0: THREE.Mesh
        }
        materials: {
            ['pencil.002']: THREE.MeshStandardMaterial
        }
    }

    const { nodes, materials } = useGLTF(PencilModel) as GLTFResult;

    return (
        <group {...props} dispose={null} ref={ref}>
            <mesh
                geometry={nodes.Pencil_Low_pencil_0.geometry}
                material={materials['pencil.002']}
                scale={3.948}/>
        </group>
    );
});

useGLTF.preload(PencilModel);

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Jiří Kuba (https://sketchfab.com/kuba.jirka)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/book-003e4c4df7de41758ba124d32101bcef
Title: Book
*/

const Book = React.forwardRef(function(props: JSX.IntrinsicElements['group'], ref: React.Ref<THREE.Group>) {
    type GLTFResult = GLTF & {
        nodes: {
        Book_0: THREE.Mesh
        Book_1: THREE.Mesh
        }
        materials: {
        BookMaterial: THREE.MeshStandardMaterial
        BookPaperMaterial: THREE.MeshStandardMaterial
        }
    }

    const { nodes, materials } = useGLTF(BookModel) as GLTFResult;
    return (
        <group {...props} dispose={null} ref={ref}>
            <group rotation={[-Math.PI / 2, 0, 0]} scale={1}>
                <mesh
                    geometry={nodes.Book_0.geometry}
                    material={materials.BookMaterial}/>
                <mesh
                    geometry={nodes.Book_1.geometry}
                    material={materials.BookPaperMaterial}/>
            </group>
        </group>
    );
});

useGLTF.preload(BookModel);

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: codyseibert (https://sketchfab.com/codyseibert)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/laptop-9a960986f0cc49f99a0afdfb486ec859
Title: Laptop
*/

const Laptop = React.forwardRef(function (props: JSX.IntrinsicElements['group'], ref: React.Ref<THREE.Group>) {
    type GLTFResult = GLTF & {
        nodes: {
        computer_0: THREE.Mesh
        }
        materials: {
        Material: THREE.MeshStandardMaterial
        }
    }

    const { nodes, materials } = useGLTF(LaptopModel) as GLTFResult;
    return (
        <group {...props} dispose={null} ref={ref}>
            <group rotation={[-Math.PI / 2, 0, 0]}>
                <mesh
                    geometry={nodes.computer_0.geometry}
                    material={materials.Material}
                    position={[-0.363, 0.566, 0]}
                    rotation={[0, 1.562, -Math.PI]}
                    scale={[-0.027, 0.027, 0.027]}/>
            </group>
        </group>
    );
});

useGLTF.preload(LaptopModel);

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: rollthebryce (https://sketchfab.com/rollthebryce)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/sport-water-bottle-e896a110ba8f4262943b1a343ed2287e
Title: Sport Water Bottle
Used with modifications
*/

const WaterBottle = React.forwardRef(function(props: JSX.IntrinsicElements['group'], ref: React.Ref<THREE.Group>) {
    type GLTFResult = GLTF & {
        nodes: {
            pCylinder1_lambert1_0: THREE.Mesh
            pCylinder2_lambert1_0: THREE.Mesh
        }
        materials: {
            lambert1: THREE.MeshStandardMaterial
            ['lambert1.001']: THREE.MeshStandardMaterial
        }
    }

    const { nodes, materials } = useGLTF(WaterBottleModel) as GLTFResult;

    return (
        <group {...props} dispose={null} ref={ref}>
            <mesh
                geometry={nodes.pCylinder1_lambert1_0.geometry}
                material={materials.lambert1}
                position={[0, 0.341, 0]}
                scale={[1, 3.744, 1]}/>
            <mesh
                geometry={nodes.pCylinder2_lambert1_0.geometry}
                material={materials['lambert1.001']}
                position={[0, 4.419, 0]}
                scale={[1.209, 0.344, 1.209]}/>
        </group>
    );
});

useGLTF.preload(WaterBottleModel);

export const PickupView = function({lane, pickupId}: {lane: Lane, pickupId: string}): React.JSX.Element {
    const groupRef = React.useRef<THREE.Group>(null);
    const meshRef = React.useRef<THREE.Mesh & THREE.Group>(null);
    const pickup = gameState.currentInstance.terrainManager.pickupById(pickupId);
    const circleTextureMap = useLoader(THREE.TextureLoader, BackgroundImage) as THREE.Texture;

    if(!pickup) {
        console.error("invalid pickup ID: "+pickupId);
        return <></>;
    }

    useFrame((s, delta) => {
        if(groupRef.current) {
            groupRef.current.position.z = pickup.offset;
        }
        if(meshRef.current) {
            meshRef.current.rotateOnWorldAxis(new THREE.Vector3(0,1,0),delta*ROTATION_SPEED);
        }
    });

    let pickupElement;
    switch(pickup.type) {
        case PickupType.WaterBottle:
            pickupElement = <WaterBottle position={[0,pickup.height,0]} scale={0.1} rotation={[0,0,Math.PI / 4]} ref={meshRef}/>;
            break;
        case PickupType.Pencil:
            pickupElement = <Pencil position={[0,pickup.height,0]} scale={3} rotation={[0,0,Math.PI / 4]} ref={meshRef}/>;
            break;
        case PickupType.Book:
            pickupElement = <Book position={[0,pickup.height,0]} scale={0.5} rotation={[0,0,Math.PI / 3.5]} ref={meshRef}/>;
            break;
        case PickupType.Laptop:
            pickupElement = <Laptop position={[0,pickup.height-0.2,0]} scale={0.75} rotation={[0,0,0]} ref={meshRef}/>;
            break;
    }

    return (
        <group position={[laneToOffset(lane), 0, 0]} ref={groupRef}>
            {pickupElement}
            <sprite position={[0,pickup.height,0.8]} scale={[1.5,1.5,1.5]}>
                <spriteMaterial map={circleTextureMap}/>
            </sprite>
            <Shadow position={[0, 0.01, 0]} scale={1}/>
        </group>
    );
}

